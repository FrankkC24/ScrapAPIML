{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":";;;;;AAAA,sDAAqD;AACrD,8DAAqC;AACrC,gDAAwB;AACxB,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;AAE3B,mDAAuD;AAEvD,MAAM,GAAG,GAAwB,IAAA,iBAAO,GAAE,CAAC;AAC3C,MAAM,IAAI,GAAW,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,EAAE,EAAE,CAAC,CAAC;AAE9D,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,IAAA,cAAI,GAAE,CAAC,CAAC;AAEhB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAChD,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AAExB,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAE5B,GAAG,CAAC,IAAI,CAAC,sBAAsB,EAAE,KAAK,EAAE,GAA8B,EAAE,GAAkC,EAAE,EAAE;IAC5G,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAE5B,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;QACtC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,kGAAkG,EAAE,CAAC,CAAC;IAC/I,CAAC;IAED,IAAI,CAAC;QACH,MAAM,WAAW,GAAW,MAAM,IAAA,4BAAgB,EAAC,IAAI,CAAC,CAAC;QACzD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;IACjD,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,yCAAyC,EAAE,CAAC,CAAC;IAC/E,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACpB,OAAO,CAAC,GAAG,CAAC,2BAA2B,IAAI,EAAE,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC","sourcesContent":["import express, { Request, Response } from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors';\r\nrequire('dotenv').config();\r\n\r\nimport { checkGroupStatus } from './modules/fullGroup';\r\n\r\nconst app: express.Application = express();\r\nconst port: number = parseInt(process.env.PORT || '3000', 10);\r\n\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\n\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.json());\r\n\r\napp.disable('x-powered-by');\r\n\r\napp.post('/invitacion/:link(*)', async (req: Request<{ link: string }>, res: Response<{ message: string }>) => {\r\n  const { link } = req.params;\r\n\r\n  if (!link || typeof link !== 'string') {\r\n    return res.status(400).json({ message: 'El enlace ingresado no corresponde a una invitación de Spotify, ingrese una invitación correcta.' });\r\n  }\r\n\r\n  try {\r\n    const groupStatus: string = await checkGroupStatus(link);\r\n    res.status(200).json({ message: groupStatus });\r\n  } catch (error: any) {\r\n    res.status(500).json({ message: 'Error al verificar el estado del grupo.' });\r\n  }\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server running on port: ${port}`);\r\n});\r\n"]}